# Generated by Django 4.0.1 on 2022-06-07 10:59

import authentication.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='OrganizationNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.BooleanField(default=False)),
                ('message', models.BooleanField(default=False)),
                ('telegram', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'organization_notification',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('max_users', models.IntegerField(default=5)),
                ('max_tabs', models.IntegerField(default=5)),
                ('max_tiles_per_tab', models.IntegerField(default=10)),
                ('notification', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='authentication.organizationnotification')),
            ],
            options={
                'db_table': 'organization',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('photo', models.FileField(blank=True, null=True, upload_to=authentication.models.user_directory_path)),
                ('name', models.CharField(default='', max_length=32)),
                ('last_name', models.CharField(default='', max_length=32)),
                ('username', models.CharField(db_index=True, max_length=255, unique=True)),
                ('email', models.EmailField(db_index=True, max_length=255, unique=True)),
                ('phone', models.CharField(max_length=13)),
                ('address', models.TextField(default='', max_length=150)),
                ('automation', models.CharField(choices=[('manual', 'manual'), ('automatic', 'automatic'), ('smart', 'smart')], max_length=16, null=True)),
                ('language', models.CharField(blank=True, choices=[('persian', 'persian'), ('english', 'english')], max_length=8, null=True)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('can_monitor', models.BooleanField(blank=True, default=False)),
                ('can_control', models.BooleanField(blank=True, default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('organization', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='authentication.organization')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user',
            },
        ),
    ]
